// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.27.1
// source: explore/explore-service.proto

package explore

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ExploreServiceClient is the client API for ExploreService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ExploreServiceClient interface {
	ListLikedYou(ctx context.Context, in *ListLikedYouRequest, opts ...grpc.CallOption) (*ListLikedYouResponse, error)
	ListNewLikedYou(ctx context.Context, in *ListLikedYouRequest, opts ...grpc.CallOption) (*ListLikedYouResponse, error)
	CountLikedYou(ctx context.Context, in *CountLikedYouRequest, opts ...grpc.CallOption) (*CountLikedYouResponse, error)
	PutDecision(ctx context.Context, in *PutDecisionRequest, opts ...grpc.CallOption) (*PutDecisionResponse, error)
}

type exploreServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewExploreServiceClient(cc grpc.ClientConnInterface) ExploreServiceClient {
	return &exploreServiceClient{cc}
}

func (c *exploreServiceClient) ListLikedYou(ctx context.Context, in *ListLikedYouRequest, opts ...grpc.CallOption) (*ListLikedYouResponse, error) {
	out := new(ListLikedYouResponse)
	err := c.cc.Invoke(ctx, "/explore.ExploreService/ListLikedYou", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exploreServiceClient) ListNewLikedYou(ctx context.Context, in *ListLikedYouRequest, opts ...grpc.CallOption) (*ListLikedYouResponse, error) {
	out := new(ListLikedYouResponse)
	err := c.cc.Invoke(ctx, "/explore.ExploreService/ListNewLikedYou", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exploreServiceClient) CountLikedYou(ctx context.Context, in *CountLikedYouRequest, opts ...grpc.CallOption) (*CountLikedYouResponse, error) {
	out := new(CountLikedYouResponse)
	err := c.cc.Invoke(ctx, "/explore.ExploreService/CountLikedYou", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exploreServiceClient) PutDecision(ctx context.Context, in *PutDecisionRequest, opts ...grpc.CallOption) (*PutDecisionResponse, error) {
	out := new(PutDecisionResponse)
	err := c.cc.Invoke(ctx, "/explore.ExploreService/PutDecision", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExploreServiceServer is the server API for ExploreService service.
// All implementations must embed UnimplementedExploreServiceServer
// for forward compatibility
type ExploreServiceServer interface {
	ListLikedYou(context.Context, *ListLikedYouRequest) (*ListLikedYouResponse, error)
	ListNewLikedYou(context.Context, *ListLikedYouRequest) (*ListLikedYouResponse, error)
	CountLikedYou(context.Context, *CountLikedYouRequest) (*CountLikedYouResponse, error)
	PutDecision(context.Context, *PutDecisionRequest) (*PutDecisionResponse, error)
	mustEmbedUnimplementedExploreServiceServer()
}

// UnimplementedExploreServiceServer must be embedded to have forward compatible implementations.
type UnimplementedExploreServiceServer struct {
}

func (UnimplementedExploreServiceServer) ListLikedYou(context.Context, *ListLikedYouRequest) (*ListLikedYouResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLikedYou not implemented")
}
func (UnimplementedExploreServiceServer) ListNewLikedYou(context.Context, *ListLikedYouRequest) (*ListLikedYouResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNewLikedYou not implemented")
}
func (UnimplementedExploreServiceServer) CountLikedYou(context.Context, *CountLikedYouRequest) (*CountLikedYouResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountLikedYou not implemented")
}
func (UnimplementedExploreServiceServer) PutDecision(context.Context, *PutDecisionRequest) (*PutDecisionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutDecision not implemented")
}
func (UnimplementedExploreServiceServer) mustEmbedUnimplementedExploreServiceServer() {}

// UnsafeExploreServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ExploreServiceServer will
// result in compilation errors.
type UnsafeExploreServiceServer interface {
	mustEmbedUnimplementedExploreServiceServer()
}

func RegisterExploreServiceServer(s grpc.ServiceRegistrar, srv ExploreServiceServer) {
	s.RegisterService(&ExploreService_ServiceDesc, srv)
}

func _ExploreService_ListLikedYou_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListLikedYouRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExploreServiceServer).ListLikedYou(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/explore.ExploreService/ListLikedYou",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExploreServiceServer).ListLikedYou(ctx, req.(*ListLikedYouRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExploreService_ListNewLikedYou_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListLikedYouRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExploreServiceServer).ListNewLikedYou(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/explore.ExploreService/ListNewLikedYou",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExploreServiceServer).ListNewLikedYou(ctx, req.(*ListLikedYouRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExploreService_CountLikedYou_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountLikedYouRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExploreServiceServer).CountLikedYou(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/explore.ExploreService/CountLikedYou",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExploreServiceServer).CountLikedYou(ctx, req.(*CountLikedYouRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExploreService_PutDecision_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutDecisionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExploreServiceServer).PutDecision(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/explore.ExploreService/PutDecision",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExploreServiceServer).PutDecision(ctx, req.(*PutDecisionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ExploreService_ServiceDesc is the grpc.ServiceDesc for ExploreService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ExploreService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "explore.ExploreService",
	HandlerType: (*ExploreServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListLikedYou",
			Handler:    _ExploreService_ListLikedYou_Handler,
		},
		{
			MethodName: "ListNewLikedYou",
			Handler:    _ExploreService_ListNewLikedYou_Handler,
		},
		{
			MethodName: "CountLikedYou",
			Handler:    _ExploreService_CountLikedYou_Handler,
		},
		{
			MethodName: "PutDecision",
			Handler:    _ExploreService_PutDecision_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "explore/explore-service.proto",
}
