// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	explore "backend/explore"
	context "context"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"
)

// ExploreServiceClient is an autogenerated mock type for the ExploreServiceClient type
type ExploreServiceClient struct {
	mock.Mock
}

// CountLikedYou provides a mock function with given fields: ctx, in, opts
func (_m *ExploreServiceClient) CountLikedYou(ctx context.Context, in *explore.CountLikedYouRequest, opts ...grpc.CallOption) (*explore.CountLikedYouResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CountLikedYou")
	}

	var r0 *explore.CountLikedYouResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *explore.CountLikedYouRequest, ...grpc.CallOption) (*explore.CountLikedYouResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *explore.CountLikedYouRequest, ...grpc.CallOption) *explore.CountLikedYouResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*explore.CountLikedYouResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *explore.CountLikedYouRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListLikedYou provides a mock function with given fields: ctx, in, opts
func (_m *ExploreServiceClient) ListLikedYou(ctx context.Context, in *explore.ListLikedYouRequest, opts ...grpc.CallOption) (*explore.ListLikedYouResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListLikedYou")
	}

	var r0 *explore.ListLikedYouResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *explore.ListLikedYouRequest, ...grpc.CallOption) (*explore.ListLikedYouResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *explore.ListLikedYouRequest, ...grpc.CallOption) *explore.ListLikedYouResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*explore.ListLikedYouResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *explore.ListLikedYouRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListNewLikedYou provides a mock function with given fields: ctx, in, opts
func (_m *ExploreServiceClient) ListNewLikedYou(ctx context.Context, in *explore.ListLikedYouRequest, opts ...grpc.CallOption) (*explore.ListLikedYouResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListNewLikedYou")
	}

	var r0 *explore.ListLikedYouResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *explore.ListLikedYouRequest, ...grpc.CallOption) (*explore.ListLikedYouResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *explore.ListLikedYouRequest, ...grpc.CallOption) *explore.ListLikedYouResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*explore.ListLikedYouResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *explore.ListLikedYouRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutDecision provides a mock function with given fields: ctx, in, opts
func (_m *ExploreServiceClient) PutDecision(ctx context.Context, in *explore.PutDecisionRequest, opts ...grpc.CallOption) (*explore.PutDecisionResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutDecision")
	}

	var r0 *explore.PutDecisionResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *explore.PutDecisionRequest, ...grpc.CallOption) (*explore.PutDecisionResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *explore.PutDecisionRequest, ...grpc.CallOption) *explore.PutDecisionResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*explore.PutDecisionResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *explore.PutDecisionRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewExploreServiceClient creates a new instance of ExploreServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewExploreServiceClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *ExploreServiceClient {
	mock := &ExploreServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
