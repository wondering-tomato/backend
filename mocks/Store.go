// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	explore "backend/explore"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// Store is an autogenerated mock type for the Store type
type Store struct {
	mock.Mock
}

// CountLikedYou provides a mock function with given fields: ctx, id
func (_m *Store) CountLikedYou(ctx context.Context, id int) (uint64, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for CountLikedYou")
	}

	var r0 uint64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (uint64, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) uint64); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllLiked provides a mock function with given fields: ctx, id, lastId
func (_m *Store) GetAllLiked(ctx context.Context, id int, lastId int) ([]*explore.ListLikedYouResponse_Liker, int, error) {
	ret := _m.Called(ctx, id, lastId)

	if len(ret) == 0 {
		panic("no return value specified for GetAllLiked")
	}

	var r0 []*explore.ListLikedYouResponse_Liker
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int) ([]*explore.ListLikedYouResponse_Liker, int, error)); ok {
		return rf(ctx, id, lastId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, int) []*explore.ListLikedYouResponse_Liker); ok {
		r0 = rf(ctx, id, lastId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*explore.ListLikedYouResponse_Liker)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, int) int); ok {
		r1 = rf(ctx, id, lastId)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, int, int) error); ok {
		r2 = rf(ctx, id, lastId)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetNewAllLiked provides a mock function with given fields: ctx, id
func (_m *Store) GetNewAllLiked(ctx context.Context, id int) ([]*explore.ListLikedYouResponse_Liker, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetNewAllLiked")
	}

	var r0 []*explore.ListLikedYouResponse_Liker
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) ([]*explore.ListLikedYouResponse_Liker, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) []*explore.ListLikedYouResponse_Liker); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*explore.ListLikedYouResponse_Liker)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutDecision provides a mock function with given fields: ctx, actorId, recipientId, liked
func (_m *Store) PutDecision(ctx context.Context, actorId int, recipientId int, liked int) (bool, error) {
	ret := _m.Called(ctx, actorId, recipientId, liked)

	if len(ret) == 0 {
		panic("no return value specified for PutDecision")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int, int) (bool, error)); ok {
		return rf(ctx, actorId, recipientId, liked)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, int, int) bool); ok {
		r0 = rf(ctx, actorId, recipientId, liked)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, int, int) error); ok {
		r1 = rf(ctx, actorId, recipientId, liked)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewStore creates a new instance of Store. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *Store {
	mock := &Store{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
